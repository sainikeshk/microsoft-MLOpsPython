{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nsesftp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DealsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Hubspot"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HubspotDealStage",
								"type": "DatasetReference"
							},
							"name": "HubspotDealStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HubspotDeal",
								"type": "DatasetReference"
							},
							"name": "HubspotDeal"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\ths_object_id as string,\n\t\tclosedate as string,\n\t\tdealtype as string,\n\t\tnum_contacted_notes as string,\n\t\tnum_notes as string,\n\t\thubspot_owner_id as string,\n\t\tdealstage as string,\n\t\tamount as string,\n\t\tlead_status_status as string,\n\t\tOffset as string,\n\t\tHasMore as string,\n\t\tInsertedDate as timestamp,\n\t\tclosed_lost_reason as string,\n\t\ths_lastmodifieddate as string,\n\t\tamount_source as string,\n\t\tpipeline as string,\n\t\tlifecyclestage as string,\n\t\tcreatedate as string,\n\t\ths_lead_status as string,\n\t\tassociatedVids as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubspotDealStage\nHubspotDealStage derive(closedate = toTimestamp(toLong(closedate),'yyyy-MM-dd HH:mm:ss'),\n\t\ths_lastmodifieddate = toTimestamp(toLong(hs_lastmodifieddate),'yyyy-MM-dd HH:mm:ss'),\n\t\tcreatedate = toTimestamp(toLong(createdate),'yyyy-MM-dd HH:mm:ss'),\n\t\tassociatedVids = replace(replace(associatedVids,'[',''),']','')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tDealId as integer,\n\t\tDealStage as string,\n\t\tClosedLostReason as string,\n\t\tLastModifiedDate as timestamp,\n\t\tAmount as decimal(18,0),\n\t\tAmountSource as string,\n\t\tPipeline as string,\n\t\tTFOLifecycleStage as string,\n\t\tCreateDate as timestamp,\n\t\tDealOwnerId as integer,\n\t\tLeadStatus as string,\n\t\tAssociatedContactIds as string,\n\t\tClosedDate as timestamp,\n\t\tDealType as string,\n\t\tNumberOfTimesContacted as integer,\n\t\tNumberOfSalesActivities as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDealId = hs_object_id,\n\t\tDealStage = dealstage,\n\t\tClosedLostReason = closed_lost_reason,\n\t\tLastModifiedDate = hs_lastmodifieddate,\n\t\tAmount = amount,\n\t\tAmountSource = amount_source,\n\t\tPipeline = pipeline,\n\t\tTFOLifecycleStage = lifecyclestage,\n\t\tCreateDate = createdate,\n\t\tDealOwnerId = hubspot_owner_id,\n\t\tLeadStatus = lead_status_status,\n\t\tAssociatedContactIds = associatedVids,\n\t\tClosedDate = closedate,\n\t\tDealType = dealtype,\n\t\tNumberOfTimesContacted = num_contacted_notes,\n\t\tNumberOfSalesActivities = num_notes\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HubspotDeal"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EngagementDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Hubspot"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HubspotEngagementStage",
								"type": "DatasetReference"
							},
							"name": "HubspotEngagementStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HubspotEngagement",
								"type": "DatasetReference"
							},
							"name": "HubspotEngagement"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tEngagementId as long,\n\t\tcreatedAt as string,\n\t\tlastUpdated as string,\n\t\townerId as long,\n\t\ttype as string,\n\t\ttimestamp as string,\n\t\tteamId as long,\n\t\tsource as string,\n\t\tsourceId as string,\n\t\tallAccessibleTeamIds as string,\n\t\tbodyPreview as string,\n\t\tcreatedBy as long,\n\t\tmodifiedBy as long,\n\t\tportalId as long,\n\t\tactive as string,\n\t\tcontactAssosications as string,\n\t\tHasMore as string,\n\t\tOffset as string,\n\t\tInsertedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubspotEngagementStage\nHubspotEngagementStage derive(timestamp = toTimestamp(toLong(timestamp),'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tcreatedAt = toTimestamp(toLong(createdAt),'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tlastUpdated = toTimestamp(toLong(lastUpdated),'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tactive = toBoolean(active)) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tEngagementId as long,\n\t\tType as string,\n\t\tTimeStamp as timestamp,\n\t\tTeamId as long,\n\t\tCreated as timestamp,\n\t\tUpdated as timestamp,\n\t\tOwnerId as long,\n\t\tSource as string,\n\t\tSourceId as long,\n\t\tAllAccessibleTeamIds as string,\n\t\tBodyPreview as string,\n\t\tCreatedBy as long,\n\t\tModifiedBy as long,\n\t\tPortalId as long,\n\t\tActive as boolean,\n\t\tContactAssociations as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEngagementId,\n\t\tType = type,\n\t\tTimeStamp = timestamp,\n\t\tTeamId = teamId,\n\t\tCreated = createdAt,\n\t\tUpdated = lastUpdated,\n\t\tOwnerId = ownerId,\n\t\tSource = source,\n\t\tSourceId = sourceId,\n\t\tAllAccessibleTeamIds = allAccessibleTeamIds,\n\t\tBodyPreview = bodyPreview,\n\t\tCreatedBy = createdBy,\n\t\tModifiedBy = modifiedBy,\n\t\tPortalId = portalId,\n\t\tActive = active,\n\t\tContactAssociations = contactAssosications\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HubspotEngagement"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalyticsDataDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GoogleAnalyticsStage",
								"type": "DatasetReference"
							},
							"name": "GoogleAnalyticsStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GoogleAnalyticsData",
								"type": "DatasetReference"
							},
							"name": "GoogleAnalyticsData"
						}
					],
					"transformations": [
						{
							"name": "PrepareData"
						}
					],
					"script": "parameters{\n\tGroupId as integer (1)\n}\nsource(output(\n\t\tGroupId as short,\n\t\tMetricsArr as string,\n\t\tValuesArr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GoogleAnalyticsStage\nGoogleAnalyticsStage derive(GroupValue = replace(split(replace(replace(MetricsArr, ']',''),'[',''),',')[1],'\"',''),\n\t\tSourceDate = toDate(replace(split(replace(replace(MetricsArr, ']',''),'[',''),',')[2],'\"',''), 'yyyyMMdd'),\n\t\tUsers = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[1],'\"',''),\n\t\tNewUsers = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[2],'\"',''),\n\t\tPageViews = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[3],'\"',''),\n\t\tSessionsPerUser = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[4],'\"',''),\n\t\tSessions = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[5],'\"',''),\n\t\tBounceRate = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[6],'\"',''),\n\t\tAvgSessionDuration = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[7],'\"',''),\n\t\tGroupId = $GroupId,\n\t\tGoal1ConversionRate = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[8],'\"',''),\n\t\tGoal1Completions = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[9],'\"',''),\n\t\tGoal1Value = replace(split(replace(replace(ValuesArr, ']',''),'[',''),',')[10],'\"','')) ~> PrepareData\nPrepareData sink(input(\n\t\tGroupId as integer,\n\t\tGroupValue as string,\n\t\tSourceDate as date,\n\t\tUsers as double,\n\t\tNewUsers as double,\n\t\tPageviews as double,\n\t\tSessionsPerUser as double,\n\t\tSessions as double,\n\t\tBounceRate as double,\n\t\tAvgSessionDuration as double,\n\t\tGoal1ConversionRate as double,\n\t\tGoal1Completions as double,\n\t\tGoal1Value as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tGroupId,\n\t\tGroupValue,\n\t\tSourceDate,\n\t\tUsers,\n\t\tNewUsers,\n\t\tPageviews = PageViews,\n\t\tSessionsPerUser,\n\t\tSessions,\n\t\tBounceRate,\n\t\tAvgSessionDuration,\n\t\tGoal1ConversionRate,\n\t\tGoal1Completions,\n\t\tGoal1Value\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> GoogleAnalyticsData"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OwnerDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Hubspot"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HubspotOwnerStage",
								"type": "DatasetReference"
							},
							"name": "HubspotOwnerStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HubspotOwner",
								"type": "DatasetReference"
							},
							"name": "HubspotOwner"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tOwnerId as long,\n\t\tfirstName as string,\n\t\tlastName as string,\n\t\temail as string,\n\t\tcreatedAt as string,\n\t\tupdatedAt as string,\n\t\thasContactsAccess as string,\n\t\tactiveUserId as long,\n\t\tactiveSalesforceId as long,\n\t\tisActive as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubspotOwnerStage\nHubspotOwnerStage derive(createdAt = toTimestamp(toLong(createdAt),'yyyy-MM-dd HH:mm:ss'),\n\t\tupdatedAt = toTimestamp(toLong(updatedAt),'yyyy-MM-dd HH:mm:ss')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tOwnerId as long,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tCreated as timestamp,\n\t\tUpdated as timestamp,\n\t\tHasContactsAccess as boolean,\n\t\tActiveUserId as integer,\n\t\tActiveSalesForceId as string,\n\t\tIsActive as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tOwnerId,\n\t\tFirstName = firstName,\n\t\tLastName = lastName,\n\t\tEmail = email,\n\t\tCreated = createdAt,\n\t\tUpdated = updatedAt,\n\t\tHasContactsAccess = hasContactsAccess,\n\t\tActiveUserId = activeUserId,\n\t\tActiveSalesForceId = activeSalesforceId,\n\t\tIsActive = isActive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HubspotOwner"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ShareDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinShareStage",
								"type": "DatasetReference"
							},
							"name": "LinkedinShareStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinShare",
								"type": "DatasetReference"
							},
							"name": "LinkedinShare"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\towner as string,\n\t\tagent as string,\n\t\tactivity as string,\n\t\tsubject as string,\n\t\tcreatedby as string,\n\t\tcreated as string,\n\t\tid as string,\n\t\tlastModifiedby as string,\n\t\tlastModified as string,\n\t\ttext as string,\n\t\tlandingPageTitle as string,\n\t\tdescription as string,\n\t\tentityLocation as string,\n\t\ttitle as string,\n\t\tlandingPageUrl as string,\n\t\tentity as string,\n\t\tshareMediaCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LinkedinShareStage\nLinkedinShareStage derive(created = toTimestamp(toLong(created), 'yyyy-MM-dd HH:mm:ss'),\n\t\tlastModified = toTimestamp(toLong(lastModified), 'yyyy-MM-dd HH:mm:ss')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tOwner as string,\n\t\tAgent as string,\n\t\tActivity as string,\n\t\tSubject as string,\n\t\tCreatedBy as string,\n\t\tCreated as timestamp,\n\t\tId as string,\n\t\tLastModifiedBy as string,\n\t\tLastModified as timestamp,\n\t\tText as string,\n\t\tLandingPageTitle as string,\n\t\tDescription as string,\n\t\tEntityLocation as string,\n\t\tTitle as string,\n\t\tLandingPageUrl as string,\n\t\tEntity as string,\n\t\tShareMediaCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tOwner = owner,\n\t\tAgent = agent,\n\t\tActivity = activity,\n\t\tSubject = subject,\n\t\tCreatedBy = createdby,\n\t\tCreated = created,\n\t\tId = id,\n\t\tLastModifiedBy = lastModifiedby,\n\t\tLastModified = lastModified,\n\t\tText = text,\n\t\tLandingPageTitle = landingPageTitle,\n\t\tDescription = description,\n\t\tEntityLocation = entityLocation,\n\t\tTitle = title,\n\t\tLandingPageUrl = landingPageUrl,\n\t\tEntity = entity,\n\t\tShareMediaCategory = shareMediaCategory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> LinkedinShare"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterAccountDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterAccountStage",
								"type": "DatasetReference"
							},
							"name": "TwitterAccountStage"
						},
						{
							"dataset": {
								"referenceName": "IndustryType",
								"type": "DatasetReference"
							},
							"name": "InustryType"
						},
						{
							"dataset": {
								"referenceName": "ApprovalStatus",
								"type": "DatasetReference"
							},
							"name": "ApprovalStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterAccount",
								"type": "DatasetReference"
							},
							"name": "TwitterAccount"
						}
					],
					"transformations": [
						{
							"name": "JoinApprovalStatus"
						},
						{
							"name": "JoinIndustryType"
						},
						{
							"name": "SelectAccountColumns"
						},
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tAccountId as string,\n\t\tName as string,\n\t\tCreated as string,\n\t\tUpdated as string,\n\t\tBusinessName as string,\n\t\tIndustryType as string,\n\t\tApprovalStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterAccountStage\nsource(output(\n\t\tIndustryTypeId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> InustryType\nsource(output(\n\t\tApprovalStatusId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ApprovalStatus\nJoinIndustryType, ApprovalStatus join(ApprovalStatus == ApprovalStatus@Name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinApprovalStatus\nTwitterAccountStage, InustryType join(IndustryType == InustryType@Name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIndustryType\nPrepareColumns select(mapColumn(\n\t\tAccountId,\n\t\tName = TwitterAccountStage@Name,\n\t\tCreated,\n\t\tUpdated,\n\t\tBusinessName,\n\t\tIndustryTypeId,\n\t\tApprovalStatusId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAccountColumns\nJoinApprovalStatus derive(Created = toTimestamp(Created, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tUpdated = toTimestamp(Updated, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3')) ~> PrepareColumns\nSelectAccountColumns sink(input(\n\t\tAccountId as string,\n\t\tName as string,\n\t\tCreated as timestamp,\n\t\tUpdated as timestamp,\n\t\tBusinessName as string,\n\t\tIndustryTypeId as integer,\n\t\tApprovalStatusId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAccountId,\n\t\tName,\n\t\tCreated,\n\t\tUpdated,\n\t\tBusinessName,\n\t\tIndustryTypeId,\n\t\tApprovalStatusId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterAccount"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterCampaignDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterCampaignStage",
								"type": "DatasetReference"
							},
							"name": "TwitterCampaignStage"
						},
						{
							"dataset": {
								"referenceName": "Currency",
								"type": "DatasetReference"
							},
							"name": "Currency"
						},
						{
							"dataset": {
								"referenceName": "CampaignStatus",
								"type": "DatasetReference"
							},
							"name": "CampaignStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterCampaign",
								"type": "DatasetReference"
							},
							"name": "TwitterCampaign"
						}
					],
					"transformations": [
						{
							"name": "JoinCurrency"
						},
						{
							"name": "JoinStatus"
						},
						{
							"name": "PrepareColumns"
						},
						{
							"name": "SelectCampaignColumns"
						}
					],
					"script": "source(output(\n\t\tAccountId as string,\n\t\tCampaignId as string,\n\t\tName as string,\n\t\tCreated as string,\n\t\tModified as string,\n\t\tStatus as string,\n\t\tCurrency as string,\n\t\tTotalBudgetAmount as string,\n\t\tDailyBudgetAmount as string,\n\t\tServable as string,\n\t\tStartDate as string,\n\t\tEndDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterCampaignStage\nsource(output(\n\t\tCurrencyId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Currency\nsource(output(\n\t\tCampaignStatusID as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CampaignStatus\nJoinStatus, Currency join(Currency == Currency@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCurrency\nTwitterCampaignStage, CampaignStatus join(Status == CampaignStatus@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinStatus\nJoinCurrency derive(Created = toTimestamp(Created, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tModified = toTimestamp(Modified, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tStartDate = toTimestamp(StartDate, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tEndDate = toTimestamp(EndDate, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3')) ~> PrepareColumns\nPrepareColumns select(mapColumn(\n\t\tAccountId,\n\t\tCampaignId,\n\t\tName = TwitterCampaignStage@Name,\n\t\tCreated,\n\t\tModified,\n\t\tStatus,\n\t\tCurrency,\n\t\tTotalBudgetAmount,\n\t\tDailyBudgetAmount,\n\t\tServable,\n\t\tStartDate,\n\t\tEndDate,\n\t\tCampaignStatusID,\n\t\tCurrencyId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCampaignColumns\nSelectCampaignColumns sink(input(\n\t\tAccountId as string,\n\t\tCampaignId as string,\n\t\tName as string,\n\t\tCreated as timestamp,\n\t\tModified as timestamp,\n\t\tStatusId as integer,\n\t\tCurrencyID as integer,\n\t\tTotalBudgetAmount as long,\n\t\tDailyBudgetAmount as long,\n\t\tServable as boolean,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAccountId,\n\t\tCampaignId,\n\t\tName,\n\t\tCreated,\n\t\tModified,\n\t\tStatusId = CampaignStatusID,\n\t\tCurrencyID = CurrencyId,\n\t\tTotalBudgetAmount,\n\t\tDailyBudgetAmount,\n\t\tServable,\n\t\tStartDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterCampaign"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterLineItemDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterLineItemStage",
								"type": "DatasetReference"
							},
							"name": "TwitterLineItemStage"
						},
						{
							"dataset": {
								"referenceName": "BidType",
								"type": "DatasetReference"
							},
							"name": "BidType"
						},
						{
							"dataset": {
								"referenceName": "ChargeBy",
								"type": "DatasetReference"
							},
							"name": "ChargeBy"
						},
						{
							"dataset": {
								"referenceName": "ProductType",
								"type": "DatasetReference"
							},
							"name": "ProductType"
						},
						{
							"dataset": {
								"referenceName": "EntityStatus",
								"type": "DatasetReference"
							},
							"name": "EntityStatus"
						},
						{
							"dataset": {
								"referenceName": "BidUnit",
								"type": "DatasetReference"
							},
							"name": "BidUnit"
						},
						{
							"dataset": {
								"referenceName": "TwitterObjective",
								"type": "DatasetReference"
							},
							"name": "TwitterObjetive"
						},
						{
							"dataset": {
								"referenceName": "Currency",
								"type": "DatasetReference"
							},
							"name": "Currency"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterLineItem",
								"type": "DatasetReference"
							},
							"name": "TwitterLineItem"
						}
					],
					"transformations": [
						{
							"name": "JoinBidType"
						},
						{
							"name": "JoinChargeBy"
						},
						{
							"name": "JoinProductType"
						},
						{
							"name": "JoinEntityStatus"
						},
						{
							"name": "JoinBidUnit"
						},
						{
							"name": "JoinObjective"
						},
						{
							"name": "JoinCurrency"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tAccountId as string,\n\t\tName as string,\n\t\tBidType as string,\n\t\tAdvertiserUserId as string,\n\t\tStartDate as string,\n\t\tBidAmountLocalMicro as string,\n\t\tAutomaticallySelectBid as string,\n\t\tAdvertiserDomain as string,\n\t\tTargetCPALocalMicro as string,\n\t\tPrimaryWebEventTag as string,\n\t\tChargeBy as string,\n\t\tProductType as string,\n\t\tEndDate as string,\n\t\tBidUnit as string,\n\t\tTotalBudgetAmountLocalMicro as string,\n\t\tObjective as string,\n\t\tId as string,\n\t\tEntityStatus as string,\n\t\tOptimization as string,\n\t\tCurrency as string,\n\t\tCreated as string,\n\t\tUpdated as string,\n\t\tCreativeSource as string,\n\t\tCampaignId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterLineItemStage\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BidType\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ChargeBy\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProductType\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EntityStatus\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BidUnit\nsource(output(\n\t\tId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterObjetive\nsource(output(\n\t\tCurrencyId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Currency\nJoinChargeBy, BidType join(BidType == BidType@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinBidType\nJoinProductType, ChargeBy join(ChargeBy == ChargeBy@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinChargeBy\nJoinEntityStatus, ProductType join(ProductType == ProductType@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinProductType\nJoinBidUnit, EntityStatus join(EntityStatus == EntityStatus@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinEntityStatus\nJoinObjective, BidUnit join(BidUnit == BidUnit@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinBidUnit\nJoinCurrency, TwitterObjetive join(Objective == TwitterObjetive@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinObjective\nTwitterLineItemStage, Currency join(Currency == Currency@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCurrency\nJoinBidType select(mapColumn(\n\t\tAccountId,\n\t\tName = TwitterLineItemStage@Name,\n\t\tBidType,\n\t\tAdvertiserUserId,\n\t\tStartDate,\n\t\tBidAmountLocalMicro,\n\t\tAutomaticallySelectBid,\n\t\tAdvertiserDomain,\n\t\tTargetCPALocalMicro,\n\t\tPrimaryWebEventTag,\n\t\tChargeBy,\n\t\tProductType,\n\t\tEndDate,\n\t\tBidUnit,\n\t\tTotalBudgetAmountLocalMicro,\n\t\tObjective,\n\t\tId = TwitterLineItemStage@Id,\n\t\tEntityStatus,\n\t\tOptimization,\n\t\tCurrency,\n\t\tCreated,\n\t\tUpdated,\n\t\tCreativeSource,\n\t\tCampaignId,\n\t\tCurrencyId,\n\t\tName = Currency@Name,\n\t\tDisplayName = Currency@DisplayName,\n\t\tTwitterObjectiveId = TwitterObjetive@Id,\n\t\tBidUnitId = BidUnit@Id,\n\t\tEntityStatusId = EntityStatus@Id,\n\t\tProductTypeId = ProductType@Id,\n\t\tChargeById = ChargeBy@Id,\n\t\tBidTypeId = BidType@Id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns derive(StartDate = toTimestamp(StartDate, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tEndDate = toTimestamp(EndDate, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tCreated = toTimestamp(Created, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tUpdated = toTimestamp(Updated, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tAccountId as string,\n\t\tName as string,\n\t\tBidTypeId as integer,\n\t\tAdvertiserUserId as long,\n\t\tStartDate as timestamp,\n\t\tBidAmountLocalMicro as double,\n\t\tAutomaticallySelectBid as boolean,\n\t\tAdvertiserDomain as string,\n\t\tTargetCPALocalMicro as double,\n\t\tPrimaryWebEventTag as string,\n\t\tChargeById as integer,\n\t\tProductTypeId as integer,\n\t\tEndDate as timestamp,\n\t\tBidUnitId as string,\n\t\tTotalBudgetAmountLocalMicro as double,\n\t\tTwitterObjectiveId as integer,\n\t\tId as string,\n\t\tEntityStatusId as integer,\n\t\tOptimization as string,\n\t\tCurrencyId as string,\n\t\tCreated as timestamp,\n\t\tUpdated as timestamp,\n\t\tCreativeSource as string,\n\t\tCampaignId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAccountId,\n\t\tName,\n\t\tBidTypeId,\n\t\tAdvertiserUserId,\n\t\tStartDate,\n\t\tBidAmountLocalMicro,\n\t\tAutomaticallySelectBid,\n\t\tAdvertiserDomain,\n\t\tTargetCPALocalMicro,\n\t\tPrimaryWebEventTag,\n\t\tChargeById,\n\t\tProductTypeId,\n\t\tEndDate,\n\t\tBidUnitId,\n\t\tTotalBudgetAmountLocalMicro,\n\t\tTwitterObjectiveId,\n\t\tId,\n\t\tEntityStatusId,\n\t\tOptimization,\n\t\tCurrencyId,\n\t\tCreated,\n\t\tUpdated,\n\t\tCreativeSource,\n\t\tCampaignId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterLineItem"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterLineItemTweetDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterLineItemTweetStage",
								"type": "DatasetReference"
							},
							"name": "TwitterLineItemTweetStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterLineItemTweet",
								"type": "DatasetReference"
							},
							"name": "TwitterLineItemTweet"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tTweetId as string,\n\t\tLineItemId as string,\n\t\tcreated_at as string,\n\t\tupdated_at as string,\n\t\tentity_status as string,\n\t\tapproval_status as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterLineItemTweetStage\nTwitterLineItemTweetStage derive(created_at = toTimestamp(created_at, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3'),\n\t\tupdated_at = toTimestamp(updated_at, 'yyyy-MM-dd\\'T\\'HH:mm:ss','UTC+3')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tTweetId as string,\n\t\tLineItemId as string,\n\t\tCreated as timestamp,\n\t\tUpdated as timestamp,\n\t\tEntityStatus as string,\n\t\tApprovalStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTweetId,\n\t\tLineItemId,\n\t\tCreated = created_at,\n\t\tUpdated = updated_at,\n\t\tEntityStatus = entity_status,\n\t\tApprovalStatus = approval_status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterLineItemTweet"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterOrganicTweetFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterOrganicTweetStage",
								"type": "DatasetReference"
							},
							"name": "TwitterOrganicTweetStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterOrganicTweet",
								"type": "DatasetReference"
							},
							"name": "TwitterOrganicTweet"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\ttweet_id as string,\n\t\tfull_text as string,\n\t\tfavorite_count as string,\n\t\tretweet_count as string,\n\t\tcreated_at as string,\n\t\tfavorited as string,\n\t\tin_reply_to_status_id as string,\n\t\taccount_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterOrganicTweetStage\nTwitterOrganicTweetStage derive(created_at = toDate(trim(concat(substring(substring(replace(created_at, '+0000', ''),4),1,7), substring(substring(replace(created_at, '+0000', ''),4),17))),'MMM dd yyyy')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tTweetId as long,\n\t\tFullText as string,\n\t\tFavoriteCount as double,\n\t\tRetweetCount as double,\n\t\tCreated as timestamp,\n\t\tFavorited as double,\n\t\tInReplyToStatusId as string,\n\t\tAccountId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTweetId = tweet_id,\n\t\tFullText = full_text,\n\t\tFavoriteCount = favorite_count,\n\t\tRetweetCount = retweet_count,\n\t\tCreated = created_at,\n\t\tFavorited = favorited,\n\t\tInReplyToStatusId = in_reply_to_status_id,\n\t\tAccountId = account_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterOrganicTweet"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterTweetDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TwitterTweetStage",
								"type": "DatasetReference"
							},
							"name": "TwitterTweetStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TwitterTweet",
								"type": "DatasetReference"
							},
							"name": "TwitterTweet"
						}
					],
					"transformations": [
						{
							"name": "PrepareColumn"
						}
					],
					"script": "source(output(\n\t\taccount_id as string,\n\t\ttweet_type as string,\n\t\thashtags as string,\n\t\tin_reply_to_status_id_str as string,\n\t\tgeo as string,\n\t\tin_reply_to_user_id as string,\n\t\tcreated_at as string,\n\t\tfull_text as string,\n\t\tcard_uri as string,\n\t\tretweet_count as string,\n\t\tin_reply_to_screen_name as string,\n\t\ttweet_id as string,\n\t\tsource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TwitterTweetStage\nTwitterTweetStage derive(created_at = toDate(trim(concat(substring(substring(replace(created_at, '+0000', ''),4),1,7), substring(substring(replace(created_at, '+0000', ''),4),17))),'MMM dd yyyy')) ~> PrepareColumn\nPrepareColumn sink(input(\n\t\tTweetId as string,\n\t\tAccountId as string,\n\t\tFullText as string,\n\t\tTweetType as string,\n\t\tHashtags as string,\n\t\tInReplyToStatusIdStr as string,\n\t\tGeo as string,\n\t\tInReplyToUserId as string,\n\t\tCreated as timestamp,\n\t\tCardUri as string,\n\t\tRetweetCount as string,\n\t\tInReplyToScreenName as string,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTweetId = tweet_id,\n\t\tAccountId = account_id,\n\t\tFullText = full_text,\n\t\tTweetType = tweet_type,\n\t\tHashtags = hashtags,\n\t\tInReplyToStatusIdStr = in_reply_to_status_id_str,\n\t\tGeo = geo,\n\t\tInReplyToUserId = in_reply_to_status_id_str,\n\t\tCreated = created_at,\n\t\tCardUri = card_uri,\n\t\tRetweetCount = retweet_count,\n\t\tInReplyToScreenName = in_reply_to_screen_name,\n\t\tSource = source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TwitterTweet"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VoucherServicesDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VoucherServicesStage",
								"type": "DatasetReference"
							},
							"name": "VoucherServicesStage"
						},
						{
							"dataset": {
								"referenceName": "Currency",
								"type": "DatasetReference"
							},
							"name": "Currency"
						},
						{
							"dataset": {
								"referenceName": "MainAccountCategory",
								"type": "DatasetReference"
							},
							"name": "MainAccountCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VoucherServices",
								"type": "DatasetReference"
							},
							"name": "VoucherServices"
						}
					],
					"transformations": [
						{
							"name": "JoinTransactionCurrency"
						},
						{
							"name": "JoinMainAccountCategory"
						},
						{
							"name": "SelectVoucherService"
						},
						{
							"name": "JoinCurrency"
						},
						{
							"name": "SelectVourceServiceColumns"
						},
						{
							"name": "PrepareColumns"
						}
					],
					"script": "source(output(\n\t\tCustomerLedgerDimension as string,\n\t\tTransactionType as string,\n\t\tDepartmentLedgerDimension as string,\n\t\tSPVLedgerDimension as string,\n\t\tTransactionCurrencyAmount as decimal(18,0),\n\t\tText as string,\n\t\tName as string,\n\t\tReportingCurrencyAmount as string,\n\t\tClassLedgerDimension as string,\n\t\tJournalId as string,\n\t\tTransDate as string,\n\t\tProjectLedgerDimension as string,\n\t\tEmployeeLedgerDimension as string,\n\t\tTransactionCurrencyCode as string,\n\t\tExchRate as decimal(18,0),\n\t\tMainAccountId as string,\n\t\tTaxGroup as string,\n\t\tVoucher as string,\n\t\tMainAccountCategory as string,\n\t\tCurrency as string,\n\t\tAccountingCurrencyAmount as string,\n\t\tDescription as string,\n\t\tSerialNumber as string,\n\t\tTaxItemGroup as string,\n\t\tClientsLedgerDimension as string,\n\t\tVendorLedgerDimension as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> VoucherServicesStage\nsource(output(\n\t\tCurrencyId as short,\n\t\tName as string,\n\t\tDisplayName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Currency\nsource(output(\n\t\tMainAccountCategoryId as short,\n\t\tName as string,\n\t\tDisplayName as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MainAccountCategory\nJoinMainAccountCategory, Currency join(TransactionCurrencyCode == Currency@Name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTransactionCurrency\nVoucherServicesStage, MainAccountCategory join(MainAccountCategory == MainAccountCategory@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinMainAccountCategory\nJoinTransactionCurrency select(mapColumn(\n\t\tCustomerLedgerDimension,\n\t\tTransactionType,\n\t\tDepartmentLedgerDimension,\n\t\tSPVLedgerDimension,\n\t\tTransactionCurrencyAmount,\n\t\tText,\n\t\tName = VoucherServicesStage@Name,\n\t\tReportingCurrencyAmount,\n\t\tClassLedgerDimension,\n\t\tJournalId,\n\t\tTransDate,\n\t\tProjectLedgerDimension,\n\t\tEmployeeLedgerDimension,\n\t\tExchRate,\n\t\tMainAccountId,\n\t\tTaxGroup,\n\t\tVoucher,\n\t\tCurrency,\n\t\tAccountingCurrencyAmount,\n\t\tDescription,\n\t\tSerialNumber,\n\t\tTaxItemGroup,\n\t\tClientsLedgerDimension,\n\t\tVendorLedgerDimension,\n\t\tMainAccountCategoryId,\n\t\tTransactionCurrencyId = CurrencyId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVoucherService\nSelectVoucherService, Currency join(Currency == Currency@Name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCurrency\nJoinCurrency select(mapColumn(\n\t\tCustomerLedgerDimension,\n\t\tTransactionType,\n\t\tDepartmentLedgerDimension,\n\t\tSPVLedgerDimension,\n\t\tTransactionCurrencyAmount,\n\t\tText,\n\t\tName = SelectVoucherService@Name,\n\t\tReportingCurrencyAmount,\n\t\tClassLedgerDimension,\n\t\tJournalId,\n\t\tTransDate,\n\t\tProjectLedgerDimension,\n\t\tEmployeeLedgerDimension,\n\t\tExchRate,\n\t\tMainAccountId,\n\t\tTaxGroup,\n\t\tVoucher,\n\t\tAccountingCurrencyAmount,\n\t\tDescription,\n\t\tSerialNumber,\n\t\tTaxItemGroup,\n\t\tClientsLedgerDimension,\n\t\tVendorLedgerDimension,\n\t\tMainAccountCategoryId,\n\t\tTransactionCurrencyId,\n\t\tCurrencyId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVourceServiceColumns\nSelectVourceServiceColumns derive(TransDate = toTimestamp(replace(TransDate,' +00:00',''), 'MM/dd/yyyy HH:mm:ss')) ~> PrepareColumns\nPrepareColumns sink(input(\n\t\tJournalId as string,\n\t\tMainAccountId as integer,\n\t\tMainAccountCategoryId as integer,\n\t\tSerialNumber as long,\n\t\tTransactionCurrencyId as integer,\n\t\tCurrencyId as integer,\n\t\tTransactionType as string,\n\t\tTransactionCurrencyAmount as decimal(18,0),\n\t\tAccountingCurrencyAmount as decimal(18,0),\n\t\tReportingCurrencyAmount as decimal(18,0),\n\t\tExchangeRate as decimal(18,0),\n\t\tTransactionDate as timestamp,\n\t\tEmployeeLedgerDimension as string,\n\t\tCustomerLedgerDimension as string,\n\t\tVendorLedgerDimension as string,\n\t\tClassLedgerDimension as string,\n\t\tClientsLedgerDimension as string,\n\t\tDepartmentLedgerDimension as string,\n\t\tProjectLedgerDimension as string,\n\t\tSPVLedgerDimension as string,\n\t\tTaxGroup as string,\n\t\tTaxItemGroup as string,\n\t\tName as string,\n\t\tDescription as string,\n\t\tText as string,\n\t\tVoucher as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tJournalId,\n\t\tMainAccountId,\n\t\tMainAccountCategoryId,\n\t\tSerialNumber,\n\t\tTransactionCurrencyId,\n\t\tCurrencyId,\n\t\tTransactionType,\n\t\tTransactionCurrencyAmount,\n\t\tAccountingCurrencyAmount,\n\t\tReportingCurrencyAmount,\n\t\tExchangeRate = ExchRate,\n\t\tTransactionDate = TransDate,\n\t\tEmployeeLedgerDimension,\n\t\tCustomerLedgerDimension,\n\t\tVendorLedgerDimension,\n\t\tClassLedgerDimension,\n\t\tClientsLedgerDimension,\n\t\tDepartmentLedgerDimension,\n\t\tProjectLedgerDimension,\n\t\tSPVLedgerDimension,\n\t\tTaxGroup,\n\t\tTaxItemGroup,\n\t\tName,\n\t\tDescription,\n\t\tText,\n\t\tVoucher\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> VoucherServices"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleDV360CostPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetGoogleDoubleClickBidManagerToken",
							"method": "POST",
							"headers": {
								"client_id": {
									"value": "@variables('client_id')",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@variables('client_secret')",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@variables('refresh_token')",
									"type": "Expression"
								}
							},
							"body": {
								"from": "Pipeline"
							}
						},
						"linkedServiceName": {
							"referenceName": "GetGoogleDoubleClickBidManagerToken",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Run DV360Query",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Bearer Token').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Delete from GoogleDV360QueryFile",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['queryId']"
										},
										"sink": {
											"name": "QueryId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['metadata']['title']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['metadata']['googleCloudStoragePathForLatestReport']"
										},
										"sink": {
											"name": "StoragePath",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": "@replace(variables('RunUrl'),'QueryIdPlaceHolder',variables('QueryId'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GoogleDV360QueryFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Generated CSV Report StoragePath",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Run DV360Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select StoragePath from GoogleDV360QueryFile",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GoogleDV360QueryFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Generated CSV Report",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Generated CSV Report StoragePath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('Get Generated CSV Report StoragePath').output.firstRow.StoragePath",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Save CSV Report",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Get Generated CSV Report",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "SaveDV360MetricsCSV",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('Get Generated CSV Report').output.Response",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "SaveDV360MetricCSV",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest into GoogleDV360CostMetricsStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Save CSV Report",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Advertiser ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AdvertiserId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Advertiser",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Advertiser",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Advertiser Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AdvertiserCurrency",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Campaign ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CampaignId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Insertion Order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InsertionOrder",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Insertion Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InsertionOrderId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Line Item",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LineItem",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Line Item ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LineItemId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Campaign",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Campaign",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Creative",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Creative",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Billable Impressions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BillableImpressions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Click Rate (CTR)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClickRateCTR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Post-Click Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PostClickConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Post-View Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PostViewConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Revenue (Adv Currency)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RevenueAdvCurrency",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Media Cost (Advertiser Currency)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MediaCostAdvetiserCurrency",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Billable Cost (Adv Currency)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BillableCostAdvertiserCurrency",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Platform Fee (Adv Currency)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformFeeAdvertiserCurrency",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Platform Fee Rate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformFeeRate",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DV360CostReport",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GoogleDV360CostMetricsStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ingest into GoogleDV360CostMetrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest into GoogleDV360CostMetricsStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DV360CostMetricsDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Currency": {},
									"GoogleDV360CostMetricsStage": {},
									"GoogleDV360CostMetrics": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spCleanUpGoogleDV360CostTables]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest into ProdGoogleDV360CostMetrics",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ingest into GoogleDV360CostMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Delete from prod.GoogleDV360CostMetrics",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleDV360CostMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProdGoogleDV360CostMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"QueryId": {
						"type": "String",
						"defaultValue": "737387306"
					},
					"RunUrl": {
						"type": "String",
						"defaultValue": "https://www.googleapis.com/doubleclickbidmanager/v1.1/query/QueryIdPlaceHolder"
					},
					"client_id": {
						"type": "String",
						"defaultValue": "846510467628-s82p2r3kns7tctorpmqhvs5asi2kbev1.apps.googleusercontent.com"
					},
					"client_secret": {
						"type": "String",
						"defaultValue": "HwnuWSil6GE-c5jd_6fBNqIQ"
					},
					"refresh_token": {
						"type": "String",
						"defaultValue": "1//03XUpD_KVRMaECgYIARAAGAMSNwF-L9IrWd-Iwn0uUSzlCIQBr_UvoA9g7wpRHlNrqI9VdSvGdQqZiQlTckpiDE_L8FaQ4tw1fF8"
					}
				},
				"folder": {
					"name": "DV360"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T05:10:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleDV360Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetGoogleDCMReportingAPIBearerToken",
							"method": "POST",
							"headers": {},
							"body": {
								"from": "Pipeline"
							}
						},
						"linkedServiceName": {
							"referenceName": "GoogleDV360Function",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Report",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Bearer Token').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Delete from GoogleDV360ReportFile",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "FileId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['lastModifiedTime']"
										},
										"sink": {
											"name": "GeneratedTimeStamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fileName']"
										},
										"sink": {
											"name": "FileName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['dateRange']['startDate']"
										},
										"sink": {
											"name": "StartDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['dateRange']['endDate']"
										},
										"sink": {
											"name": "EndDate",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleDV360API",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@replace(replace(variables('ReportGenerationUrl'),'ProfileIdPlaceholder',variables('ProfileId')),'ReportIdPlaceholder',variables('ReportId'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GoogleDV360ReportFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Report FileId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Generate Report",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select CAST(FileId as varchar) as FileId from GoogleDV360ReportFile",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GoogleDV360ReportFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Report File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Report FileId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@replace(replace(variables('FileDownloadUrl'),'ProfileIdPlaceholder',variables('ProfileId')),'FileIdPlaceholder',activity('Get Report FileId').output.firstRow.FileId)",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@activity('Get Bearer Token').output.AccessTokenValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Save Report File",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Get Report File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "SaveDV360Report",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('Get Report File').output.Response",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "SaveDV360ReportFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest into GoogleDV360CampaignStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Save Report File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Delete from GoogleDV360CampaignStage",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Campaign",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CampaignName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Campaign ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CampaignId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Creative",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Creative",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Click Rate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClickRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Click-through Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClickThroughConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - tfoco.com - Detail Submit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TfocoComDetailSubmitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Global Tag: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComGlobalTagTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Homepage - Visit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComHomePageVisitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Investment Planner - Visit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComInvestmentPlannerVisitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Portfolio Planner - Visit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComPortfolioPlannerVisitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Webinar signup: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComWebinarSignupTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - new tfoco.com - Detail Submit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NewTfocoComDetailSubmitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - tfoco.com - Homepage - Visit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TfocoComHomePageVisitTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - tfoco.com - Wealth Planning - Visit: Total Conversions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TfocoComWealthPlanningTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Remarketing : TFO - tfoco.com - Who We Are - Visit: Total Conversions\r",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TfocoComWhoWeAreTotalConversions",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DV360CampaignCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GoogleDV360CampaignStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ingest into GoogleDV360Campaign",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest into GoogleDV360CampaignStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DV360CampaignDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GoogleDV360CampaignStage": {},
									"GoogleDV360Campaign": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleanup Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spCleanUpGoogleDV360CampaignTables]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest into ProdGoogleDV360Campaign",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ingest into GoogleDV360Campaign",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Delete from prod.GoogleDV360Campaign",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CampaignId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CampaignId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CampaignName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CampaignName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Creative",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Creative",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ClickRate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "ClickRate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ClickThroughConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "ClickThroughConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TfocoComDetailSubmitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TfocoComDetailSubmitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComGlobalTagTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComGlobalTagTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComHomePageVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComHomePageVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComInvestmentPlannerVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComInvestmentPlannerVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComPortfolioPlannerVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComPortfolioPlannerVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComWebinarSignupTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComWebinarSignupTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "NewTfocoComDetailSubmitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NewTfocoComDetailSubmitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TfocoComHomePageVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TfocoComHomePageVisitTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TfocoComWealthPlanningTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TfocoComWealthPlanningTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TfocoComWhoWeAreTotalConversions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TfocoComWhoWeAreTotalConversions",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleDV360Campaign",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProdGoogleDV360Campaign",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"ProfileId": {
						"type": "String",
						"defaultValue": "6035039"
					},
					"ReportId": {
						"type": "String",
						"defaultValue": "735756341"
					},
					"ReportGenerationUrl": {
						"type": "String",
						"defaultValue": "https://www.googleapis.com/dfareporting/v3.4/userprofiles/ProfileIdPlaceholder/reports/ReportIdPlaceholder/run"
					},
					"FileDownloadUrl": {
						"type": "String",
						"defaultValue": "https://www.googleapis.com/dfareporting/v3.4/reports/ProfileIdPlaceholder/files/FileIdPlaceholder?alt=media"
					}
				},
				"folder": {
					"name": "DV360"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T05:10:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterOrganicPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Twitter Authentication Header For Organic Tweets",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Organic Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('OrganicTweetUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								},
								"UrlParams": "timeline_type=ORGANIC&tweet_type=PUBLISHED&trim_user=true"
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterOrganicTweetStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For Organic Tweets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For Organic Tweets').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['favorite_count']"
										},
										"sink": {
											"name": "favorite_count",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['retweet_count']"
										},
										"sink": {
											"name": "retweet_count",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['in_reply_to_status_id']"
										},
										"sink": {
											"name": "in_reply_to_status_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "created_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['favorited']"
										},
										"sink": {
											"name": "favorited",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['full_text']"
										},
										"sink": {
											"name": "full_text",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['tweet_id']"
										},
										"sink": {
											"name": "tweet_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['request']['params']['account_id']"
										},
										"sink": {
											"name": "account_id",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@concat(replace(variables('OrganicTweetUrl'),'AccountIdPlaceHolder', variables('AccountId')),'?timeline_type=ORGANIC&tweet_type=PUBLISHED&trim_user=true')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterOrganicTweetStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Distinct OrganicTweetString",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Populate TwitterOrganicTweetString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  OrganicTweetString from TwitterOrganicTweetString",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TwitterOrganicTweetString",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Populate TwitterOrganicTweetString",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterOrganicTweetStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateTwitterOrganicTweetString]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest into TwitterOrganicTweetMetrics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach OrganicTweetString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsertTwitterOrganicEngagementData]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Cleanup Twitter Organic Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Check if Differential",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spCleanUpTwitterOrganicTables]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach OrganicTweetString",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Distinct OrganicTweetString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Distinct OrganicTweetString').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute TwitterOrganicTweetMetricsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TwitterOrganicTweetMetricsPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"OrganicTweetIdString": {
												"value": "@item().OrganicTweetString ",
												"type": "Expression"
											},
											"ConsumerKey": {
												"value": "@variables('ConsumerKey')",
												"type": "Expression"
											},
											"ConsumerKeySecret": {
												"value": "@variables('ConsumerKeySecret')",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('AccessToken')",
												"type": "Expression"
											},
											"AccessTokenSecret": {
												"value": "@variables('AccessTokenSecret')",
												"type": "Expression"
											},
											"AccountId": {
												"value": "@variables('AccountId')",
												"type": "Expression"
											},
											"StartDate": {
												"value": "@variables('StartDate')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Ingest Into TwitterOrganicTweet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterOrganicTweetStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterOrganicTweetFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterOrganicTweetStage": {},
									"TwitterOrganicTweet": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Ingest into ProdTwitterOrganicTweetMetrics",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ingest into TwitterOrganicTweetMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ingest Into TwitterOrganicTweet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat('Delete from prod.TwitterOrganicTweetMetrics where MetricDate >=''',variables('StartDate'),'''')}",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TweetId",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "TweetId",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "MetricDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "MetricDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TweetsSend",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TweetsSend",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "QualifiedImpressions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "QualifiedImpressions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Follows",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Follows",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "AppClicks",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "AppClicks",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Retweets",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Retweets",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Unfollows",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Unfollows",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Likes",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Likes",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Engagements",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Engagements",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "CardEngagements",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "CardEngagements",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PollCardVote",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PollCardVote",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Replies",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Replies",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TwitterOrganicTweetMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProdTwitterOrganicTweetMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Check if Differential",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('Differential'), true)\n\n ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set StartDate",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@formatDateTime(adddays(utcnow(),-2),'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"ConsumerKey": {
						"type": "String",
						"defaultValue": "0bNbRmwfcwUylurWUlMLXVw6s"
					},
					"ConsumerKeySecret": {
						"type": "String",
						"defaultValue": "tTrmn64h8rvHSNfnqYzKk6TOdug8lUIT9m1lu4wLWh7cSKt7IS"
					},
					"AccessToken": {
						"type": "String",
						"defaultValue": "1247510171749883906-Mw7rz6qlwk38ZIAdnzD0RmUPQSqw78"
					},
					"AccessTokenSecret": {
						"type": "String",
						"defaultValue": "lxDxAxy1H6EhHniLrNyBxwEIwmZbGeOLXgaNXrUmsRDew"
					},
					"AccountId": {
						"type": "String",
						"defaultValue": "18ce554fqwc"
					},
					"AnalyticsUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/stats/accounts/AccountIdPlaceHolder"
					},
					"StartDate": {
						"type": "String",
						"defaultValue": "2020-01-01"
					},
					"OrganicTweetUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/tweets"
					},
					"Differential": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Twitter"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T05:10:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TwitterOrganicTweetFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Twitter Authentication Header For Accounts",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('AccountUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterAccountStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For Accounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For Accounts').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['data']['name']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['business_name']"
										},
										"sink": {
											"name": "BusinessName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['id']"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['created_at']"
										},
										"sink": {
											"name": "Created",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['updated_at']"
										},
										"sink": {
											"name": "Updated",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['industry_type']"
										},
										"sink": {
											"name": "IndustryType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['approval_status']"
										},
										"sink": {
											"name": "ApprovalStatus",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@replace(variables('AccountUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterAccountStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ingest Into TwitterAccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterAccountStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterAccountDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterAccountStage": {},
									"InustryType": {},
									"ApprovalStatus": {},
									"TwitterAccount": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Twitter Authentication Header For Campaigns",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('CampaignUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterCampaignStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For Campaigns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For Campaigns').output.AccessTokenValue\n",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['start_time']"
										},
										"sink": {
											"name": "StartDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['servable']"
										},
										"sink": {
											"name": "Servable",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['daily_budget_amount_local_micro']"
										},
										"sink": {
											"name": "DailyBudgetAmount",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['end_time']"
										},
										"sink": {
											"name": "EndDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['total_budget_amount_local_micro']"
										},
										"sink": {
											"name": "TotalBudgetAmount",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "CampaignId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entity_status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['currency']"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "Created",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['updated_at']"
										},
										"sink": {
											"name": "Modified",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['request']['params']['account_id']"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@replace(variables('CampaignUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterCampaignStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Twitter Authentication Header For LineItems",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('LineItemUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterLineItemStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For LineItems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For LineItems').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['request']['params']['account_id']"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['bid_type']"
										},
										"sink": {
											"name": "BidType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['advertiser_user_id']"
										},
										"sink": {
											"name": "AdvertiserUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['start_time']"
										},
										"sink": {
											"name": "StartDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['bid_amount_local_micro']"
										},
										"sink": {
											"name": "BidAmountLocalMicro",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['automatically_select_bid']"
										},
										"sink": {
											"name": "AutomaticallySelectBid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['advertiser_domain']"
										},
										"sink": {
											"name": "AdvertiserDomain",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['target_cpa_local_micro']"
										},
										"sink": {
											"name": "TargetCPALocalMicro",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['primary_web_event_tag']"
										},
										"sink": {
											"name": "PrimaryWebEventTag",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['charge_by']"
										},
										"sink": {
											"name": "ChargeBy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['product_type']"
										},
										"sink": {
											"name": "ProductType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['end_time']"
										},
										"sink": {
											"name": "EndDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['bid_unit']"
										},
										"sink": {
											"name": "BidUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['total_budget_amount_local_micro']"
										},
										"sink": {
											"name": "TotalBudgetAmountLocalMicro",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['objective']"
										},
										"sink": {
											"name": "Objective",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entity_status']"
										},
										"sink": {
											"name": "EntityStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['optimization']"
										},
										"sink": {
											"name": "Optimization",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['currency']"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "Created",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['updated_at']"
										},
										"sink": {
											"name": "Updated",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['campaign_id']"
										},
										"sink": {
											"name": "CampaignId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['creative_source']"
										},
										"sink": {
											"name": "CreativeSource",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@replace(variables('LineItemUrl'),'AccountIdPlaceHolder', variables('AccountId'))\n",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterLineItemStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Twitter Authentication Header For WebSiteCards",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('CardUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterWebSiteCardStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For WebSiteCards",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For WebSiteCards').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['website_shortened_url']"
										},
										"sink": {
											"name": "WebsiteShortenedUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['image_display_height']"
										},
										"sink": {
											"name": "ImageDisplayHeight",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['media_url']"
										},
										"sink": {
											"name": "MediaUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['website_display_url']"
										},
										"sink": {
											"name": "WebsiteDisplayUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['website_dest_url']"
										},
										"sink": {
											"name": "WebsiteDestUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['media_key']"
										},
										"sink": {
											"name": "MediaKey",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "Created",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['image_display_width']"
										},
										"sink": {
											"name": "ImageDisplayWidth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['website_title']"
										},
										"sink": {
											"name": "WebsiteTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['card_uri']"
										},
										"sink": {
											"name": "CardUri",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['website_url']"
										},
										"sink": {
											"name": "WebsiteUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['updated_at']"
										},
										"sink": {
											"name": "Updated",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['card_type']"
										},
										"sink": {
											"name": "CardType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['request']['params']['account_id']"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": "@replace(variables('CardUrl'),'AccountIdPlaceHolder', variables('AccountId'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterWebSiteCardStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cleanup Twitter Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Check if Differential",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spCleanUpTwitterTables]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get LineItemsString",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Populate TwitterLineItemString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  LineItemString from [dbo].[TwitterLineItemString]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TwitterLineItemString",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Populate TwitterLineItemString",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterLineItemStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateTwitterLineItemString]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach LineItemString",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get LineItemsString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get LineItemsString').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute EngagementsMetricsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TwitterEngagementsMetricsPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"LineItemString": {
												"value": "@item().LineItemString",
												"type": "Expression"
											},
											"ConsumerKey": {
												"value": "@variables('ConsumerKey')",
												"type": "Expression"
											},
											"ConsumerKeySecret": {
												"value": "@variables('ConsumerKeySecret')",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('AccessToken')",
												"type": "Expression"
											},
											"AccessTokenSecret": {
												"value": "@variables('AccessTokenSecret')",
												"type": "Expression"
											},
											"AccountId": {
												"value": "@variables('AccountId')",
												"type": "Expression"
											},
											"StartDate": {
												"value": "@variables('StartDate')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Ingest into TwitterEnagagementMetrics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach LineItemString",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsertTwitterEngagementData]"
						},
						"linkedServiceName": {
							"referenceName": "DashboardDb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Twitter Authentication Header For Tweets",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('TweetUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								},
								"UrlParams": "tweet_type=PUBLISHED"
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterTweetStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For Tweets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For Tweets').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['source']"
										},
										"sink": {
											"name": "source",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entities']['hashtags'][0]['text']"
										},
										"sink": {
											"name": "hashtags",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['in_reply_to_status_id_str']"
										},
										"sink": {
											"name": "in_reply_to_status_id_str",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['geo']"
										},
										"sink": {
											"name": "geo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['in_reply_to_user_id']"
										},
										"sink": {
											"name": "in_reply_to_user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['retweet_count']"
										},
										"sink": {
											"name": "retweet_count",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "created_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['tweet_type']"
										},
										"sink": {
											"name": "tweet_type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['card_uri']"
										},
										"sink": {
											"name": "card_uri",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['full_text']"
										},
										"sink": {
											"name": "full_text",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['in_reply_to_screen_name']"
										},
										"sink": {
											"name": "in_reply_to_screen_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['tweet_id']"
										},
										"sink": {
											"name": "tweet_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['request']['params']['account_id']"
										},
										"sink": {
											"name": "account_id",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@concat(replace(variables('TweetUrl'),'AccountIdPlaceHolder', variables('AccountId')),'?','tweet_type=PUBLISHED')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterTweetStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ingest into TwitterCampaign",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterCampaignStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterCampaignDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterCampaignStage": {},
									"Currency": {},
									"CampaignStatus": {},
									"TwitterCampaign": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Ingest into TwitterLineItem",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterLineItemStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterLineItemDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterLineItemStage": {},
									"BidType": {},
									"ChargeBy": {},
									"ProductType": {},
									"EntityStatus": {},
									"BidUnit": {},
									"TwitterObjetive": {},
									"Currency": {},
									"TwitterLineItem": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Twitter Authentication Header For Promoted Tweets",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Cleanup Twitter Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTwitterAuthenticationHeader",
							"method": "GET",
							"headers": {
								"ConsumerKey": {
									"value": "@variables('ConsumerKey')",
									"type": "Expression"
								},
								"ConsumerKeySecret": {
									"value": "@variables('ConsumerKeySecret')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessTokenSecret": {
									"value": "@variables('AccessTokenSecret')",
									"type": "Expression"
								},
								"APIUrl": {
									"value": "@replace(variables('PromotedTweetUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GetTwitterAuthenticationHeader",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Into TwitterLineItemTweetStage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Twitter Authentication Header For Promoted Tweets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@activity('Get Twitter Authentication Header For Promoted Tweets').output.AccessTokenValue",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['line_item_id']"
										},
										"sink": {
											"name": "LineItemId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entity_status']"
										},
										"sink": {
											"name": "entity_status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['created_at']"
										},
										"sink": {
											"name": "created_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['updated_at']"
										},
										"sink": {
											"name": "updated_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['approval_status']"
										},
										"sink": {
											"name": "approval_status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['tweet_id']"
										},
										"sink": {
											"name": "TweetId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicRESTDataSet",
								"type": "DatasetReference",
								"parameters": {
									"Url": {
										"value": "@replace(variables('PromotedTweetUrl'),'AccountIdPlaceHolder', variables('AccountId'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterLineItemTweetStage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ingest into TwitterTweet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterTweetStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterTweetDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterTweetStage": {},
									"TwitterTweet": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Ingest into TwitterLineItemTweet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest Into TwitterLineItemTweetStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TwitterLineItemTweetDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TwitterLineItemTweetStage": {},
									"TwitterLineItemTweet": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "HighPerformanceIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Tables list to Copy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest into TwitterEnagagementMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ingest into TwitterCampaign",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ingest into TwitterTweet",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ingest into TwitterLineItemTweet",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ingest into TwitterLineItem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select 'TwitterLineItem' as TblName\nunion\nselect 'TwitterCampaign' as TblName\nunion\nselect 'TwitterLineItemTweet' as TblName\nunion\nselect 'TwitterTweet' as TblName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "HubspotContact",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Each Table to Prod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tables list to Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tables list to Copy').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Ingest into Prod Tables",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@{concat('select * from dbo.',item().TblName)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('delete from prod.',item().TblName)}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicDataSet",
											"type": "DatasetReference",
											"parameters": {
												"TblName": "@item().TblName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DynamicDataSet",
											"type": "DatasetReference",
											"parameters": {
												"TblName": {
													"value": "@item().TblName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy Recent Metrics",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Each Table to Prod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat('Delete from prod.TwitterEnagagementMetrics where MetricDate >''',variables('StartDate'),'''')}",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LineItemId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LineItemId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MetricDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "MetricDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Impressions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TweetsSend",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TweetsSend",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "QualifiedImpressions",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "QualifiedImpressions",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Follows",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Follows",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "AppClicks",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "AppClicks",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Retweets",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Retweets",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Unfollows",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Unfollows",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Likes",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Likes",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Engagements",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Engagements",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Clicks",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "CardEngagements",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "CardEngagements",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PollCardVote",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PollCardVote",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Replies",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Replies",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "BilledChargeLocalMicro",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "BilledChargeLocalMicro",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "BilledEngagements",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "BilledEngagements",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TwitterEnagagementMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProdTwitterEnagagementMetrics",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Check if Differential",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('Differential'), true)\n\n ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set StartDate",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@formatDateTime(adddays(utcnow(),-2),'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"ConsumerKey": {
						"type": "String",
						"defaultValue": "0bNbRmwfcwUylurWUlMLXVw6s"
					},
					"ConsumerKeySecret": {
						"type": "String",
						"defaultValue": "tTrmn64h8rvHSNfnqYzKk6TOdug8lUIT9m1lu4wLWh7cSKt7IS"
					},
					"AccessToken": {
						"type": "String",
						"defaultValue": "1247510171749883906-Mw7rz6qlwk38ZIAdnzD0RmUPQSqw78"
					},
					"AccessTokenSecret": {
						"type": "String",
						"defaultValue": "lxDxAxy1H6EhHniLrNyBxwEIwmZbGeOLXgaNXrUmsRDew"
					},
					"AccountUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder"
					},
					"AccountId": {
						"type": "String",
						"defaultValue": "18ce554fqwc"
					},
					"CampaignUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/campaigns"
					},
					"LineItemUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/line_items"
					},
					"AnalyticsUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/stats/accounts/AccountIdPlaceHolder"
					},
					"StartDate": {
						"type": "String",
						"defaultValue": "2020-01-01"
					},
					"CardUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/cards/website"
					},
					"TweetUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/tweets"
					},
					"PromotedTweetUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/promoted_tweets"
					},
					"OrganicTweetUrl": {
						"type": "String",
						"defaultValue": "https://ads-api.twitter.com/8/accounts/AccountIdPlaceHolder/tweets"
					},
					"Differential": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Twitter"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T05:10:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TwitterAccountDataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/TwitterCampaignDataflow')]",
				"[concat(variables('factoryId'), '/dataflows/TwitterLineItemDataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/TwitterTweetDataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/TwitterLineItemTweetDataflow')]"
			]
		}
	]
}